import threading
from datetime import time, datetime
import streamlit as st
import pandas as pd
import time as sleep_time

from src.data_science.ProcessingData import ProcessingData
from src.parser_cian.ParsingPages import ParsingPages
from src.parser_cian.settings import PAGES_PARSE, URL_PAGE_1, URL_PAGE_2, DATA_PATH
from src.streamlit.dashboard import slide_bar_filter, show_price_distribution, \
    create_dashboard_streamlit, create_interactive_map


def init_session_state():
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'raw_data' not in st.session_state:
        st.session_state.raw_data = None
    if 'filter_params' not in st.session_state:
        st.session_state.filter_params = {}
    if 'auto_parse' not in st.session_state:
        st.session_state.auto_parse = False
    if 'parse_time' not in st.session_state:
        st.session_state.parse_time = time(0, 0)
    if 'last_parse' not in st.session_state:
        st.session_state.last_parse = "–ù–∏–∫–æ–≥–¥–∞"


def run_parsing():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        parsing = ParsingPages(base_urls=[URL_PAGE_1, URL_PAGE_2], max_pages=PAGES_PARSE)
        parsing.parse_all_pages()
        data = pd.read_csv(DATA_PATH)
        st.session_state.raw_data = data
        st.session_state.last_parse = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        st.toast("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!", icon="‚úÖ")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")


def auto_parse_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    while st.session_state.auto_parse:
        now = datetime.now().time()
        if now.hour == st.session_state.parse_time.hour and now.minute == st.session_state.parse_time.minute:
            run_parsing()
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            sleep_time.sleep(60)
        sleep_time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥


def setup_auto_parse():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    st.sidebar.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    auto_parse = st.sidebar.checkbox(
        "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥",
        value=st.session_state.auto_parse,
        key="auto_parse_checkbox"
    )

    parse_time = st.sidebar.time_input(
        "–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞",
        value=st.session_state.parse_time,
        key="parse_time_input"
    )

    if st.sidebar.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.session_state.auto_parse = auto_parse
        st.session_state.parse_time = parse_time

        if auto_parse:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            thread = threading.Thread(target=auto_parse_loop, daemon=True)
            thread.start()
            st.sidebar.success(f"‚úÖ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –Ω–∞ {parse_time.strftime('%H:%M')}")
        else:
            st.sidebar.warning("‚ö†Ô∏è –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")

    st.sidebar.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥:** {st.session_state.last_parse}")


def ensure_data_exists():
    try:
        data = pd.read_csv(DATA_PATH)
        st.session_state.raw_data = data
        return True
    except FileNotFoundError:
        if st.button("üï∑Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö", key="parse_button"):
            with st.status("üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...", expanded=True) as status:
                try:
                    run_parsing()
                    status.update(label="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!", state="complete", expanded=False)
                    return True
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
                    return False
        return False


def process_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        try:
            process_data_df = ProcessingData(st.session_state.raw_data.copy())
            process_data_df.clean_data()
            process_data_df.convert_columns()
            process_data_df.save_to_csv_df()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
            st.session_state.data_loaded = True
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")


def show_filters_and_results():
    if st.session_state.raw_data is not None:
        filtered_df = slide_bar_filter(st.session_state.raw_data)
        st.session_state.filter_params = {
            'filtered_df': filtered_df,
            'last_update': pd.Timestamp.now()
        }

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        tab1, tab2, tab3 = st.tabs(["–î–∞—à–±–æ—Ä–¥", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω", "–ö–∞—Ä—Ç–∞"])

        with tab1:
            create_dashboard_streamlit(filtered_df)

        with tab2:
            show_price_distribution(filtered_df)

        with tab3:
            create_interactive_map(filtered_df)


def main():
    st.set_page_config(layout="wide", page_icon="üè†")

    init_session_state()
    setup_auto_parse()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not ensure_data_exists():
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        st.stop()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not st.session_state.data_loaded:
        if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            process_data()

    if st.session_state.data_loaded:
        show_filters_and_results()

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="secondary"):
            st.session_state.data_loaded = False
            st.rerun()


if __name__ == '__main__':
    main()

