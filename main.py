
import streamlit as st
import pandas as pd

from src.data_science.ProcessingData import ProcessingData
from src.parser_cian.ParsingPages import ParsingPages
from src.parser_cian.settings import PAGES_PARSE, URL_PAGE_1, URL_PAGE_2
from src.streamlit.dashboard import slide_bar_filter, show_price_distribution, \
    create_dashboard_streamlit, create_interactive_map
from src.streamlit.load_data import load_data


def init_session_state():
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'raw_data' not in st.session_state:
        st.session_state.raw_data = None
    if 'filter_params' not in st.session_state:
        st.session_state.filter_params = {}


def ensure_data_exists():
    try:
        data = pd.read_csv("src/utils_/hata.csv")
        st.session_state.raw_data = data
        return True
    except FileNotFoundError:
        if st.button("üï∑Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö", key="parse_button"):
            with st.status("üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...", expanded=True) as status:
                try:
                    st.write("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
                    parsing = ParsingPages(url=[URL_PAGE_1, URL_PAGE_2], pages=PAGES_PARSE)

                    st.write("üåê –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–æ–≤...")
                    parsing.parsing_pages()

                    data = pd.read_csv("src/utils_/hata.csv")
                    st.session_state.raw_data = data
                    status.update(label="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!", state="complete", expanded=False)
                    return True
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
                    return False
        return False


def process_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        try:
            process_data = ProcessingData(st.session_state.raw_data.copy())
            process_data.clean_data()
            process_data.convert_columns()
            process_data.save_to_csv_df()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
            st.session_state.data_loaded = True
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")


def show_filters_and_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if st.session_state.raw_data is not None:
        # –§–∏–ª—å—Ç—Ä—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
        filtered_df = slide_bar_filter(st.session_state.raw_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        st.session_state.filter_params = {
            'filtered_df': filtered_df,
            'last_update': pd.Timestamp.now()
        }

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        tab1, tab2, tab3 = st.tabs(["–î–∞—à–±–æ—Ä–¥", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω", "–ö–∞—Ä—Ç–∞"])

        with tab1:
            create_dashboard_streamlit(filtered_df)

        with tab2:
            show_price_distribution(filtered_df)

        with tab3:
            create_interactive_map(filtered_df)


def main():
    st.set_page_config(layout="wide", page_icon="üè†")

    init_session_state()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not ensure_data_exists():
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        st.stop()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not st.session_state.data_loaded:
        if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            process_data()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if st.session_state.data_loaded:
        show_filters_and_results()

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ", type="secondary"):
            st.session_state.data_loaded = False
            st.rerun()




if __name__ == '__main__':
    main()

